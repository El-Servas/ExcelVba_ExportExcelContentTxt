Representación Textual del archivo de Excel: "ExportToTxt.xls"

Hojas:
 [Sheet1]

Contenido:
[Sheet1]

Nombres:
 [Desc] =Sheet1!$B:$B
 [Ids] =Sheet1!$A$1:$A$4

Nombre del proyecto VB: [Lib_ExportToTxt]

Módulos VBA:
 [ThisWorkbook] Tipo: 100
 [Sheet1] Tipo: 100
 [ExportToTxt] Tipo: 1
 [ExportToTxtClass] Tipo: 2

Codigo:
[ThisWorkbook] 12 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

    'En caso de que se grabe éste libro, que es el que tiene el código, vamos a llamar directamente a la rutina:
    ExportToTxt.ExportToTxt Me

    'Para los demás libros, se debe de mandar llamar la rutina que dispare el proceso:
    'On Error Resume Next: Application.Run "Personal.xlsb!ExportToTxt.ExportToTxt", Me

End Sub

\\\--- END OF MODULE ---

[Sheet1] 0 líneas de código.
///--- BEGINNING OF MODULE ---
\\\--- END OF MODULE ---

[ExportToTxt] 175 líneas de código.
///--- BEGINNING OF MODULE ---
'---------------------------------------------------------------------------------------
' Module    : ExportToTxt
' Author    : +
' Date      : 05/06/2013
' Purpose   : Exporta una representación textual de un libro de Excel
' Version   : v2.3.1 - 2013-06-05.
'---------------------------------------------------------------------------------------

Option Explicit

Private Const TOKEN_PRE_EXTENSION = ".TXTXL"
Private Const TOKEN_EXTENSION = ".txt"

Private Const TOKEN_HEADER = "Representación Textual del archivo de Excel: "
Private Const TOKEN_HOJAS_TITLE = "Hojas:"
Private Const TOKEN_CONTENT_TITLE = "Contenido:"
Private Const TOKEN_NOMBRES_TITLE = "Nombres:"
Private Const TOKEN_MODULOS_TITLE = "Módulos VBA:"
Private Const TOKEN_CODIGO_TITLE = "Codigo:"
Private Const TOKEN_MODULE_BEGINS = "///--- BEGINNING OF MODULE ---"
Private Const TOKEN_MODULE_END = "\\\--- END OF MODULE ---"

Private FSO As New Scripting.FileSystemObject
Private Stream As TextStream 'El stream donde vamos a escribir el archivo

Private BTE As Workbook '(BookToExport) Referencia al libro que vamos a exportar.

Sub ExportToTxt(bookToExport As Workbook)
Set BTE = bookToExport
Set Stream = FSO.CreateTextFile(GetTXTFileName(), True, False)

GenEncabezado
GenHojas
GenNombres
GenModulos

Stream.Close
End Sub

Function GetTXTFileName() As String
    Dim NombreDelArchivo As String _
    , Ruta As String _
    , NombreCompleto As String
    
    NombreDelArchivo = FSO.GetBaseName(BTE.name) & TOKEN_PRE_EXTENSION & TOKEN_EXTENSION
    Ruta = BTE.Path
    NombreCompleto = FSO.BuildPath(Ruta, NombreDelArchivo)
    
    GetTXTFileName = NombreCompleto
    'Debug.Print GetTXTFileName
End Function

Sub GenEncabezado()
Log TOKEN_HEADER & """" & BTE.name & """"
Log
End Sub

Sub GenHojas()
'--- Lista de hojas
Log TOKEN_HOJAS_TITLE
IteraHojas "ImprimeNombreDeHoja"
Log

'--- Contenido de cada hoja
Log TOKEN_CONTENT_TITLE
IteraHojas "ProcesaContenidoDeHoja"
End Sub

Sub GenNombres()
Log TOKEN_NOMBRES_TITLE
IteraNombres "ImprimeNombre"
Log
End Sub

Sub GenModulos()
Log "Nombre del proyecto VB: [" & BTE.VBProject.name & "]"
Log

Log TOKEN_MODULOS_TITLE
IteraModulos "ImprimeNombreDeModulo"
Log

Log TOKEN_CODIGO_TITLE
IteraModulos "ProcesaModulo"
Log
End Sub

Sub ProcesaModulo(vbcomp As vbcomponent, iterationIndex As Integer)
    Dim CodeLines As Integer
    CodeLines = vbcomp.CodeModule.CountOfLines
    Log "[" & vbcomp.name & "] " & CodeLines & " líneas de código."
    
    Log TOKEN_MODULE_BEGINS
    If CodeLines > 0 Then
        Log vbcomp.CodeModule.Lines(1, CodeLines)
    End If
    Log TOKEN_MODULE_END
    
    Log
End Sub

Sub ImprimeNombreDeModulo(vbcomp As vbcomponent, iterationIndex As Integer)
    Log " [" & vbcomp.name & "] Tipo: " & vbcomp.Type
End Sub

Sub IteraModulos(DelegateName As String)
    Dim vbcomponent As vbcomponent
    Dim ix As Integer
    ix = 0
    For Each vbcomponent In BTE.VBProject.VBComponents
        ix = ix + 1
        Application.Run DelegateName, vbcomponent, ix
    Next
End Sub


Sub ImprimeNombre(name As name, iterationIndex As Integer)
    Log " [" & name.name & "] " & name.RefersTo
End Sub

Sub IteraNombres(DelegateName As String)
    Dim name As name
    Dim ix As Integer
    ix = 0
    For Each name In BTE.Names
        ix = ix + 1
        Application.Run DelegateName, name, ix
    Next
End Sub

Sub ImprimeNombreDeHoja(sheet As Worksheet, iterationIndex As Integer)
    Log " [" & sheet.name & "]"
End Sub

Sub ProcesaContenidoDeHoja(sheet As Worksheet, iterationIndex As Integer)
    Log "[" & sheet.name & "]"
    IteraCeldas sheet, "ProcesaCelda"
    Log
End Sub

Sub IteraHojas(DelegateName As String)
    Dim sheet As Worksheet
    Dim ix As Integer
    ix = 0
    For Each sheet In BTE.Worksheets
        ix = ix + 1
        Application.Run DelegateName, sheet, ix
    Next
End Sub

Function ProcesaCelda(cell As Range, iterationIndex As Integer) As Integer
    If cell.FormulaHidden And cell.Parent.ProtectContents Then 'Fórmula escondida y la hoja está protegida.
        ProcesaCelda = iterationIndex + 1
        Log " [" & cell.Address(False, False) & "] \" & "**FÓRMULA INACCESIBLE**" & "\"
    ElseIf cell.Formula <> "" Then 'Fórmula accesible, pero que no esté vacía.
        ProcesaCelda = iterationIndex + 1
        Log " [" & cell.Address(False, False) & "] \" & cell.Formula & "\"
    End If
End Function

Sub IteraCeldas(sheet As Worksheet, DelegateName As String)
    Dim cell As Range, column As Range
    Dim ix As Integer
    ix = 0
    For Each column In sheet.UsedRange.Cells.Columns
        For Each cell In column.Cells
            ix = Application.Run(DelegateName, cell, ix)
        Next
    Next
End Sub

Sub Log(Optional Mensaje As String)
'Debug.Print Mensaje
Stream.WriteLine (Mensaje)
End Sub
\\\--- END OF MODULE ---

[ExportToTxtClass] 2 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

\\\--- END OF MODULE ---


